switch ~ case ~ break

switch(변수){ // 정수형 혹은 String 혹은 열거형
case 조건 1:
조건 1 에 대한 처리
break; // break 문은 switch 문을 빠져 나가는 역할을 함
case 조건 2:
조건 2 에 대한 처리
break;
...
case 조건 10:
조건 10 에 대한 처리
break;
default:
조건 1 ~ 조건 10 이 아닌 상황에 대한 예외 처리 
break; // 마지막의 break 문은 생략 가능
}

위의 switch 문은 조건1 부터 조건 10 그리고, 그 외의 상황 중에서, 한 상황을 선택할 수 있게 한다.
switch 문의 변수는 정수형 혹은 String 형 혹은 열거형만 올 수 있다. 그리고, case 문으로 해당하는 특정 조건을 상수로 나타낼 수  있다. 단, 이때 열거형은 열거형 클래스명은 생략하고 열거형 값만 써야 한다. 
각 case 문에는 break 문이 들어가게 되고, break 문을 통해서, 해당 조건에 대한 처리를 하고, switch문을 빠져나가게 된다.
마지막으로 오는 default 문은 위의 case문이 아닌 예외의 상황에 해당하는 처리를 하는 데 사용한다. 만약 중간에 case문에 break 문이 생략되면, 참인 조건문에서 부터 빠져나오지 않고 모두 실행된다.

if else 문과 비교

입력값이 정형화되어 있는 경우 if문보다는 switch/case문을 쓰는것이 가독성에서 좀 더 유리하다.
※ switch/case문은 if else 구조로 변경이 가능하지만 if else 구조로 작성된 모든 코드를 switch 문으로 변경할 수는 없다.
if - else 문과는 다르게 switch -case에는 조건식이 아닌 조건이 되는 변수가 들어가게 되고 중괄호 아래에 변수의 값을 case뒤에 두어 조건을 설정합니다. 
그리고 마지막에 default는 else와 비슷한 역할을 하여 조건에 맞지 않는 값들의 수행문을 결정 합니다.
case 마다 break;를 사용하는 이유는 break;는 switch-case문을 빠져나가라는 뜻으로 if-else if 문은 조건이 만족해서 수행문을 수행하면 자동으로 조건문 밖으로 빠져나가지만 
switch-case문은 그렇지 않고 다음 수행문들도 수행하기 때문에 break;로 빠져나가라고 수동으로 안내해 주는 것 입니다.
