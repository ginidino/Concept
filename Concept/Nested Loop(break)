The way to break from the nested loop
 -> labeled break
In order to use labelled for loop, we first need to label each loop as OURER or INNER, or whatever we want to call them. 
Then depending upon which loop we want to exit, we can call break statements.

By the way, there is a better way to do the same thing, 
by externalising the code of nested loop into a method and using a return statement for coming out of the loop. 
This improves the readability of your algorithm by giving an appropriate name to our logic.

There are two steps to break from a nested loop, the first part is labelling loop and the second part is using labeled break. 
You must put your label before the loop and you need a colon after the label as well. 
When you use label after the break, control will jump outside of the labeled loop.

This means if you have 10 level of nested loop, you can break from all of them by just calling break and label of first loop. 
Similarly if you use labeled continue, it starts continue, it starts continuing from the labeled loop.

If you want to exit at any point inside an inner loop then you should better use return statement. 
For this you need to externalise the code into a method and then call it, now at any point you want to go out of the loop, just call return without any value. 
This will improve readability.

Example code
In this example, we just have two loops, OUTER and INNER. 
We are printing number in both the loop but once the product of two counters exceeds 5, we break out from the outer loop.

This makes the program complete because we also come out of the main method. 
In the next example, the same logic has been developed using a method and return statement called breakFromNestedLoop(), 
you can see that how much it improve the readability.

// How to break from nested loop in Java. 
// You can use labeled statement with break statement to break from nested loop.
public class BreakingFromNestedLoop {
	public static void main(String[] args) {
		// this is our outer loop
		outer:
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
				// condition to break from nested loop
				if (i * j > 5) {
					System.out.println("Breaking from nested loop");
					break outer;
				}
				System.out.println(i + " " + j);
			}
		}
		System.out.println("exited");
		// better way is to encapsulate nested loop in a method 
		// and use return to break from outer loop 
		breakFromNestedLoop();
	}
	
	// You can use return statement to return at any point from a method. 
	// This will help you to break from nested loop as well
	public static void breakFromNestedLoop() {
		for (int i = 0; i < 6; i++) {
			for (int j = 0; j < 3; j++) {
				int product = i*j;
				if (product > 4) {
					System.out.println("breaking from nested loop using return");
                    return;
				}
			}
		}
		System.out.println("Done");
	}
}

Output
0 0
0 1
0 2
0 3
1 0
1 1
1 2
1 3
2 0
2 1
2 2
Breaking from nested loop
exited
breaking from nested loop using return

That’s all about how to break from a nested loop in Java. 
You have seen that how you can use the label with a break statement to terminate the outer loop from the inner loop, 
but you can do much better with encapsulating the loop in a method and then using a return statement to break from a nested loop. 
You can also use al label with a continue statement as well.

Structure
박복문명 지정 :
for (…) {
	for (…) {
		break 반목문명;
	}
}
