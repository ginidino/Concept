fibonacci function

재귀함수를 활용하는 가장 대표적인 문제는, 역시 피보나치 수열이다. 피보나치 수열은 N번째 항의 값은, 그 전항(N-1) 과, 그 전전항(N-2)의 값의 합이라는 것으로 정의되는 수열이다.
ex) 0 1 1 2 3 5 8 …
즉, 만약 N이 3이라면, 다시 말해 fibonacci(3)을 구하고자 한다면, 전항인 fibonacci(2)와, fibonacci(1)의 값을 더해서 구할 수 있다.(이하 F() 로 통일)
그렇다면 F(0)과 F(1)을 구하기 위해 F(-1)과 같은 음수로 가느냐? 그렇지는 않고, 0과 1의 값은 각각 0과 1로 정의되어 있다.

간단하게, F(4)를 구해보자. 이를 구하기 위해서는, F(3)과 F(2)를 알아야 한다. F(3)과 F(2)를 구하기 위해서는, F(2)와 F(1)을, 그리고 F(1)과F(0)을 구해야 한다.
F(1)과 F(0)은 1과 0으로 정의되어 있으니, 다시 거꾸로 타고 올라가면 된다.
F(2) = F(1) + F(0) = 1 + 0 = 1 F(3) = F(2) + F(1) = 1 + 1 = 2 F(4) = F(3) + F(2) = 2 + 1 = 3
즉, F(4)의 답은 3 이다.

1) 반복문
배열을 만들어놓고, 전항의 값, 그리고 전전항의 값을 더해서 넣으면 된다.
public static int fibonacci(int n) {
    int[] fibo = new int[n+1];
    fibo[0] = 0;
    fibo[1] = 1;

    for (int i = 2; i < fibo.length; i++) {
        fibo[i] = fibo[i-1] + fibo[i-2];
    }

    return fibo[n];
}
0번째 항과 1번째 항은 0과 1로 값을 미리 채워두고, 반복문을 통해 더해가면서 구할 수 있다.

2) 재귀함수
public static int fibonacci(int n) {
    if (n == 0) return 0;
    else if (n == 1) return 1;

    return fibonacci(n-1) + fibonacci(n-2);
}
n에 3이 들어오는 경우, fibonacci(2)와 fibonacci(1) 이 각각 호출되고, fibonacci(2)는 fibonacci(1)과 fibonacci(0)을 호출한다.
fibonacci(1)은 1을, fibonacci(0)은 0을 return하므로, 이 둘을 더해 fibonacci(2)는 1이 된다.
따라서, fibonacci(2) + fibonacci(1)은 1+1이 되어, 최종적으로 2가 return된다.

문제점
위의 class에 높은 수를 넣으면 시간이 너무 오래걸려 결과가 출력이 되지 않는다
그 이유는, 재귀함수를 돌면서, Call Stack이 쌓이기 때문이다.
 fibonacci(n)을 구하기 위해, fibonacci(n-1), fibonacci(n-2)를 수행해야 한다. fibonacci(n-1)과 fibonacci(n-2)를 구하기 전까지는, fibonacci(n)은 대기하고 있는 상태이다.
즉, n이 0 또는 1이 되기 전까지는 계속해서 대기, 대기, 대기 하는 함수들이 쌓이고, 0 또는 1이 되어서야 다시 돌아와서 값을 구하고, 더해야 하기 때문이다.

해결방법
해결방법에는 2가지 방법이 있다.
1) Tail Recursion
2) 동적계획법(cache)을 이용

1) Tail Recursion
꼬리재귀를 이용하는 방법 (while loop와 비슷)
앞서, 위와 같이 계속해서 Stack이 쌓였던 이유는, fibonacci(n-1)과 fibonacci(n-2)를 구하고 나서, 이를 더하는 연산이 필요했기 때문

코드 수정 -> 연산을 하지 않고 가장 최초로 함수를 실행한 지점으로 return

public static int fibonacci(int n) {
    return fibonacciTail(n, 0, 1);
}

public static int fibonacciTail(int n, int prev, int next) {
    if (n == 0) return prev;
    return fibonacciTail(n-1, next, prev+next);
}

앞서 코드는, fibonacci(n)을 구하기 위해서 계산을 최대한 뒤로 미루는 듯한 느낌을 받았는데, 새로운 코드는 계산을 한다음에 그 값을 넘겨준다.
그리고, 직접 디버깅으로 하나하나 실행해보면 알겠지만, n이 되는 순간 곧바로 fibonacciTail()이 아닌 fibonacci() 로 쏴버린다.
* N이 늘어나면 늘어날수록, 이 차이는 더더욱 극명하게 드러날 것이다.
Note. 좀 더 자세히 찾아보았는데, 진정한 꼬리재귀는 Stack Frame 자체를 쌓지 않는다. 
그러나, 꼬리재귀함수를 지원하는 컴파일러인 경우, 애초에 Stack Frame을 쌓지 않도록 이를 while문으로 애초에 “바꾸어버린다” 는 것이다. 따라서, 다음과 같이 정리할 수 있겠다.
꼬리재귀를 지원하는 경우 : 애초에 while문으로 바뀌기 때문에, Stack Frame 자체가 쌓이지 않음. 즉, StackOverflow 의 에러가 절대 발생하지 않는다. 
-> Tail Call Optimization 꼬리재귀를 지원하지 않는 경우 : 위와 같은 로직으로 최적화는 되더라도, Stack은 쌓이기 때문에, StackOverflow가 발생할 수 있다.

2) 동적계획법(cache)을 이용
문제가 발생했던 코드의 경우, 같은 연산을 반복하는 코드가 존재한다.
즉, F(4)를 구하기 위해서, F(3)과 F(2)를 구해야 했는데, F(3)을 구하기 위해서, 또 다시 F(2) 에 대한 연산을 해야하는 것이다.
그러므로, 재귀함수를 반복하면서, 구하고자 하는 값이, 처음 구하는 경우에는 직접 연산, 한번 구한적 있는 값이라면, 꺼내오기를 이용하면, 좀 더 똑똑하게 가져올 수 있다.
다음과 같이 코드를 작성해보자.

static int[] fibo;

public static void main(String[] args) {
    int n = 10;
    fibo = new int[n+1];
    int result = fibonacci(n);
    System.out.println(result);
}

public static int fibonacci(int n) {
    if (fibo[n] != 0) return fibo[n];
    if (n == 0) return 0;
    else if (n == 1) return 1;

    fibo[n] = fibonacci(n-1) + fibonacci(n-2);
    return fibo[n];
}
int[] 배열 fibo를 선언한 뒤, main method에서 n+1 만큼의 길이로 정의해주었다.
다음으로, fibonacci() 함수가 실행될 때마다, 값이 있는지 확인하고, 없는 경우에는 기존의 로직을, 있는 경우에는 그 값을 곧바로 return하도록 만들었다.
그리고 최종적으로, 원하는 fibonacci 값인 fibo[n]을 return했다.
