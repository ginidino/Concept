자바 출력 메소드

⊙ System.out.print();
- 줄변경 없이 출력
* 줄변경 기능이 없기 때문에 줄 변경을 하기 위해선 \n을 사용하여 줄변경

⊙ System.out.println();
- 자동 줄변경 기능이 설정 되어 있음

⊙ System.out.printf(); / System.out.format();
- System.out.printf(“출력패턴”, variablearguments);
- System.out.format(“출력패턴”, variablearguments);
- 줄변경 기능이 없기 때문에 \n을 사용하여야 줄변경 가능

variablearguments : 메소드 호출 시 출력 패턴에 맞는 인자값들을 넣어준다
- 정수 : %d
- 실수 : %f
- 문자 : %e
- 문자열 : %s

※ 출력패턴으로 출력 글자의 자릿수를 결정 할 수 있다
- %자릿수d : (%3d, 2);, 3자리 만들고 인자값 2를 넣는다
           결과값 |   |   | 2 |  
- %자릿수.나타낼소수점이하자릿수f : (%6.2f, 12.63542); 6자리를 만들고 인자값을 소수점 이하 2자리까지만 표시 
                            결과값 |   | 1 | 2 | . | 6 | 3 | 

※ 왼쪽/오른쪽 정렬 기능이 가능
- 기본적으로 오른쪽 정렬
- 왼쪽정렬은 -(minus) 기호를 붙여준다
System.out.printf(%3d, 5); -> |   |   | 2 |  
System.out.printf(%-3d, 5); -> | 2 |   |   |  

※ 출력메시지와 값을 분리하여 기술 할 수 있다 
- 가독성이 좋음
- 일반적 사용 : System.out.println("내 이름" + name + "나이" + age);
- 출력패턴 사용 : System.out.printf("내 이름 %s 나이 %d", name, age);

◈ 특수문자 : 문자 자체에 기능이 있는 문자
\n : new line(줄바꿈 기능)
\r : return(커서를 맨 앞으로)
\t : tab
\b : backspace
\f : 프린트 출력 시 줄 변경
\\ : \ 사용시
\” : “(큰따옴표) 사용시
\’ : ‘(작은따옴표) 사용시

————————————————————————————————————————————
String 클래스의 format() 메소드 : String.format();
PrintWriter 클래스와 PrintStream 클래스의 printf() 메소드 : System.out.printf();

첫번째 매개변수가 포맷을 포함한 문자열이면(포맷 문자열, format string), 나머지 매개변수(argument)의 수나 타입에 제한 없이 원하는 형태의 문자열을 생성 및 출력

System.out.printf(“%d + %d = %d입니다.”, 10, 20, 30);
%d + %d = %d입니다. -> 포맷 문자열(format string)
10, 20, 30 -> argument

String.format(“%d + %d 은 %d입니다.”, 10, 20, 30);
%d + %d 은 %d입니다. -> -> 포맷 문자열(format string)
10, 20, 30 -> argument

%d로 표현되는 부분은 format specifier라고 불리며 다음 입력 받은 argument들에 의해서 치환된다.
format specifier은 %키워드로 시작된다

인자 순서는 argument의 치환 순서를 지정하는 것
1$는 첫번째, 2$는 두번째, 3$는 세번째 argument를 의미

ex)
System.out.printf(“%2$d + %1$d = %3$d입니다.”, 10, 20, 30);를 입력했다면 %2$d에는 두번째 argument 20, %1$d에는 첫번째 argument 10, 
%3$에는 세번째 argument 30이 치환되어 “20 + 10 = 30입니다.”라는 결과값이 출력

플래그는 부가적인 정보를 표시하기 위해 사용
데이터를 왼쪽으로 정렬한다던가(기본으로 오른쪽 정렬), 금액을 표현할 때와 같이 일정 자리수마다 구분문자를 표시하는 등의 옵션을 설정하고 싶을 때 이용

ex)
System.out.printf(“%d + %d = %d입니다.”, 10, 20, 30); 의 출력 값은 “20 + 10 = 30입니다”라는 결과값이 나타난다

너비는 데이터를 표현 할 때 얼마 정도의 공간을 차지 할 것인지를 지정하고, 정밀도는 소수점 아래의 값을 몇 자리까지 표현할 것인지를 나타낸다. (정밀도는 ‘,숫자’형태로 표시)

예를 들어 %5d는 5개의 문자를 표시 할 만큼의 공간이 확보하게 되고 %5.2f는 5개의 문자를 표시 할 만큼의 공간을 확보하고 그 중간에서 2자리는 소수점 이하의 값을 표현하는데 사용

ex)
System.out.printf(“파이=%5.2f”, Math.PI);를 입력 했다면 “파이=3.14”라는 결과값이 출력
*5자리를 표시 할 수 있는 공간을 확보했지만 argument의 정수 값이 3 이므로 남은 2자리는 사용하지 않게 된다.
