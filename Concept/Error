자주 발생하는 에러와 해결방법

cannot find symbol 또는 cannot resolve symbol
지정된 변수나 method를 찾을 수 없다는 뜻으로 선언되지 않은 변수나 method를 사용하거나, 변수 또는 method의 이름을 잘못 사용한 경우에 발생. 자바에서는 대소문자 구분을 하기 때문에 철자 뿐 만 아니라 대소문자의 일치여부도 꼼꼼하게 확인.

2. ‘;’ expected
세미콜론 ‘;’이 필요한 곳에 없다는 뜻. 자바의 모든 문장의 끝에는 ‘;’을 붙여주어야 한다.

3. Exception in thread “main” java.lang.NoSuchMethodError: main
‘main method를 찾을 수 없다.’는 뜻인데 실제로 클래스 내에 main method가 존재하지 않거나 method의 선언부 ‘public static void main(String[] args)’에 오타가 존재하는 경우에 발생
이 에러의 해결방법은 main method가 class에 정의되어 있는지 확인하고, 정의되어 있다면 main method의 선언부에 오타가 없는지 확인. 자바는 대소문자를 구별하므로 대소문자의 일치여부까지 정확히 확인이 필요
args는 매개변수의 이름이므로 args 대신 argv나 arg와 같이 다른 이름을 사용할 수 있다.

4. Exception in thread “main” java.lang.NoClassDefFoundError: Hello
‘Hello라는 class를 찾을 수 없다.’는 뜻이다. class ‘Hello’의 철자, 특히 대소문자를 확인해보고 이상이 없으면 class파일 (*.class)이 생성되었는지 확인.
예를 들어 ;Hello.java’가 정상적으로 컴파일 되었다면 class파일 ‘Hello.class’가 있어야 한다. class 파일이 존재하는데도 동일한 메시지가 반복해서 나타난다면 classpath의 설정이 바르게 되어있는지 확인.
-> 파일 이름과 class의 이름이 같은지 확인

5.illegal start of expression
직역하면 문장(또는 수식, expression)의 앞부분이 문법에 맞지 않다는 의미, 간단히 말해서 문장에 문법적 오류가 있다는 뜻. 괄호’(‘ 나 ‘{‘를 열고서 닫지 않거나, 수식이나 if문, for문 등에 문법적 오류가 있을 때 또는 public이나 static과 같은 키워드를 잘못 사용한 경우에도 발생. 에러가 발생한 곳이 문법적으로 옳은지 확인해야 한다.

6. class, interface, or enum expected
이 메시지의 의미는 ‘키워드 class나 interface 또는 enum이 없다.’ 이지만, 보통 ‘{‘ 또는 ‘}’의 개수가 일치 하지 않는 경우에 발생. 열린괄호 ‘{‘와 닫힌괄호 ’}’의 개수가 같은지 확인

에러가 발생했을 때 어떻게 해결할 지에 대한 방법
에러 메시지를 잘 읽고 해당 부분의 코드를 살핀다.
      이상이 없으면 해당 코드의 주위(윗줄과 아래 줄)도 함께 살펴본다
그래도 이상이 없으면 에러 메시지는 잊어버리고 기본적인 부분을 재확인
      대부분의 에러는 사소한 것인 경우가 많다.
의심이 가는 부분을 주석처리하거나 따로 떼어내서 테스트한다.
      * 주석처리 하는 법 :
      	"범위 주석 : ’/*’ 와 ‘*/’ 사이에 주석을 넣는 방법
        한 줄 주석 : ‘//‘부터 라인 끝까지의 내용은 주석으로 간주된다"
	      * 주의할 점으론 문자열을 의미하는 (“) 안에 주석이 있을 경우 주석이 아닌 문자열로 인식된다.
  
  *에러 메시지가 실제 에러와는 관계없는 내용일 때도 있지만, 대부분의 경우 에러 메시지만 잘 이해해도 문제가 해결되는 경우가 많으므로 에러 해결을 위해서 제일 먼저 해야 할 일은 에러 메시지를 잘 익는 것임을 명심
