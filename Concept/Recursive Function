재귀함수 in java

Recursive Function(재귀함수)는 특정함수 내에서 자기 자신을 다시 호출하여 문제를 해결해 나가는 함수
문제를 해결하기 위해 원래 범위의 문제에서 더 작은 범위의 하위 문제를 먼저 해결함으로써 원래 문제를 해결해 나가는 방식
일반 반복문을 통해 구현 가능한 기능은 재귀 함수를 통해 구현이 가능하며 반대로 재귀 함수로 구현 한 기능을 반복문으로 구현이 가능
재귀 함수는 함수 내에서 자기 자신을 계속 호출하는 방식이기 때문에 함수 안에 반드시 종료 구간이 되는 Base Case를 생각하며 코드를 구현해야 함
EX)
public class Function {
	public static void main(String[] args) {
		Function();
	}
	public static void Function() {
		System.out.println("Hello! ");
		Function();
	}
}
Function이라는 Method를 정의
해당 함수의 기능은 “Hello!”를 호출하고 다시 자기 자신을 호출하고 있다. 해당 소스에서 문제는 자기 자신을 호출만 하고있지 함수 영역이 종료되는 구간이 없기때문에 “Hello!”가 계속 출력되는 무한 루프에 빠진다


public class Function {
	public static void main(String[] args) {
		Function(5);
	}
	public static void Function(int num) {
		if (num == 0) {
			return;
		} else {
			System.out.println("Hello!”);
			Function(num - 1);
		}
	}
}
Function Method는 매개변수 num을 받고 if 구문에 의해 분기가 되고 있다. 매개변수 갑이 0일 경우 return을 하고 0이 아닐 경우 “Hello!”를 출력하고 num-1에 해당하는 값을 매개변수로 전달하고 있다
여기서 num 값이 0일 경우 return을 하게 되는 구문이 이 재귀함수의 Base Case 구간이 된다.

1 to n까지 합 구하기

public class Function {
	public static void main(String[] args) {
		System.out.println("Sum from 1 to 5: " + Function(5));
	}
	public static int Function(int num) {
		if (num == 1) {
			return 1;
		} else {
			return num + Function(num - 1); 
		}
	}
}

num이 1이면 그냥 1을 return을 하고 함수가 종료
1이 아닐경우 현재 num 값에 Function(num-1) 결과로 return되는 값을 더하여 return하게 된다
풀이를 해보면 5 + 1~4까지의 합이 되는 것. 매개변수 값이 4가 넘어가게 되는 경우에는 4 + 1~3까지의 합
